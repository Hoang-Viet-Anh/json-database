type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";
        private static final String WRONG_GET_EMPTY_CELL_WITH_ERROR = "When a client tries to get an empty cell from " +
                "the server, the server should response with 'ERROR' and the client should print that response";
        private static final String WRONG_SET_VALUE_TO_CELL_WITH_OK = "When a client tries to save a value on" +
                " the server, the server should save the value and response with '" + OK_STATUS + "'. The client should " +
                "print that response";
        private static final String WRONG_GET_VALUE = "When a client tries to get a not empty cell from the server, " +
                "the server should response with a value of the cell. The client should pint received value.\n" +
                "May be the problem is in processing 'set' action:\nIf the specified cell already contains " +
                "information, you should simply rewrite it.";
        private static final String WRONG_DELETE = "When a client tries to delete a value from the cell on the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_EMPTY = "When a client tries to delete a cell with an empty value from the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_INDEX_OUT_OF_BOUNDS = "When a user tries to delete a cell which index " +
                "is less than 0 or greater than 1000, the server should response with  '" + ERROR_STATUS + "'.";

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "Hello world!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "HelloWorld!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            expectedValue = "HelloWorld!";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR + "\nMay be after deleting a cell you didn't " +
                        "assign an empty value to it.");
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "55", "-m", "Some text here");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "55");
            expectedValue = "Some text here";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "56");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "55");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "56");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "100");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1001");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_INDEX_OUT_OF_BOUNDS);
            }

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }


        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

        private static void stopServer() {
            TestedProgram client = getClient();
            client.start("-t", "exit");
        }
    }
  learner_created: false
- name: src/server/Session.java
  visible: true
  text: |
    package server;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.Socket;

    public class Session extends Thread{
        private final Socket socket;

        public Session(Socket socketForClient) {
            this.socket = socketForClient;
        }

        public void run() {
            String received = null;
            String sent = null;

            try (
                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output = new DataOutputStream(socket.getOutputStream())
            ) {
                received = input.readUTF();
                System.out.println("Received: " + received);
                if (received.contains("Give me a record # ")) {
                    received = received.substring(received.indexOf("#") + 2);
                    sent = String.format("A record # %s was sent!", received);
                } else {
                    sent = "Unknown command.";
                }
                System.out.println("Sent: " + sent);
                output.writeUTF(sent);
                socket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/server/View.java
  visible: true
  text: |
    package client;

    public class View {
        private static final View INSTANCE = new View();

        private View() {}

        public static View getInstance() {
            return INSTANCE;
        }

        public void printMenu() {
            System.out.println("set index text - set text by index of db.\n" +
                    "get index - get text by index of db.\n" +
                    "delete index - delete text by index of db.");
        }

        public void printSet(boolean set) {
            System.out.println(set ? "OK" : "ERROR");
        }

        public void printGet(String cell) {
            System.out.println(cell);
        }

        public void printDelete(boolean delete) {
            System.out.println(delete ? "OK" : "ERROR");
        }

        public void printUnknownCommand() {
            System.out.println("Unknown command.");
        }
    }
  learner_created: true
- name: src/server/Database.java
  visible: true
  text: |
    package client;

    import java.util.ArrayList;

    public class Database {
        private static final Database INSTANCE = new Database();
        ArrayList<String> database = new ArrayList<>(100);

        private Database() {
            for (int i = 0; i < 100; i++) {
                database.add(null);
            }
        }

        public static Database getInstance() {
            return INSTANCE;
        }

        public boolean setCell(String text, int index) {
            try {
                if (!text.equals("")) {
                    database.set(index - 1, text);
                    return true;
                } else {
                    return false;
                }
            } catch (IndexOutOfBoundsException exc) {
                return false;
            }
        }

        public String getCell(int index) {
            try {
                String cell = database.get(index - 1);
                return cell == null ? "ERROR" : cell;
            } catch (IndexOutOfBoundsException exc) {
                return "ERROR";
            }
        }

        public boolean deleteCell(int index) {
            try {
                database.set(index - 1, null);
                return true;
            } catch (IndexOutOfBoundsException exc) {
                return false;
            }
        }
    }
  learner_created: true
- name: src/server/Application.java
  visible: true
  text: |
    package client;

    import java.util.InputMismatchException;
    import java.util.NoSuchElementException;
    import java.util.Scanner;

    public class Application {
        public static void startJSONDB() {
            Database database = Database.getInstance();
            View view = View.getInstance();

            Scanner scanner = new Scanner(System.in);
            Scanner scanner1;

            String line = "";
            String[] command;
            String text = null;
            String choice = null;
            int index = -1;
            boolean success = false;
            view.printMenu();
            while (true) {
                line = scanner.nextLine();

                try {
                    scanner1 = new Scanner(line);
                    choice = scanner1.next();

                    switch (choice) {
                        case "set":
                            if (scanner1.hasNextInt()) {
                                index = scanner1.nextInt();
                                if (scanner1.hasNext()) {
                                    text = scanner1.nextLine().trim();
                                    success = database.setCell(text, index);
                                } else {
                                    success = false;
                                }
                            } else {
                                success = false;
                            }
                            view.printSet(success);
                            break;
                        case "get":
                            if (scanner1.hasNextInt()) {
                                index = scanner1.nextInt();
                                view.printGet(database.getCell(index));
                            } else {
                                view.printGet("ERROR");
                            }
                            break;
                        case "delete":
                            if (scanner1.hasNextInt()) {
                                index = scanner1.nextInt();
                                success = database.deleteCell(index);
                            } else {
                                success = false;
                            }
                            view.printDelete(success);
                            break;
                        case "exit":
                            System.exit(0);
                        default:
                            view.printUnknownCommand();
                            break;
                    }
                } catch (NoSuchElementException exc) {
                    view.printUnknownCommand();
                }
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5492#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 29 Mar 2022 21:15:43 UTC
record: -1
